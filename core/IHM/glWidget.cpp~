#include <GL/glew.h>
#include <iostream>
#include <unistd.h>
#include <glWidget.h>

//******************************************************************************
//******************************************************************************
HybridOcean* GLWidget::getHybridOcean()
{
	return this->_hybridOcean;
}
//******************************************************************************
void GLWidget::setHybridOcean(HybridOcean* hybridOcean)
{
	this->_hybridOcean = hybridOcean;
}
//******************************************************************************
//******************************************************************************
QSize GLWidget::minimumSizeHint() const
{
	return QSize(640, 480);
}
//******************************************************************************
QSize GLWidget::sizeHint() const 
{
	return QSize(1024, 768);
}
//******************************************************************************
//******************************************************************************
void GLWidget::init() 
{
       //	setAxisIsDrawn(true);
	setTextIsEnabled (true);

	//	setGridIsDrawn();
	setShortcut(ANIMATION, Qt::CTRL + Qt::Key_A);
	camera()->setType(Camera::PERSPECTIVE);
	camera()->setSceneRadius(50.0);
	camera()->showEntireScene();
	camera()->setPosition(Vec(-38.644604,5.909318,25.212061));
	camera()->setViewDirection(Vec(-0.061944,-0.243702,-0.967870));

	initRender();
	setAnimationPeriod(1);
	setFPSIsDisplayed(true);

	_hybridOcean = NULL;
	test();
}

//******************************************************************************
//******************************************************************************
void GLWidget::initRender() 
{
	glewInit();

	glHint(GL_LINE_SMOOTH_HINT, GL_NICEST);
	glHint(GL_POLYGON_SMOOTH_HINT, GL_NICEST);
	srand ( time ( 0x0 ) );
	glClearColor( 0,0,0, 1.0 );
	glShadeModel( GL_SMOOTH );
	glEnable ( GL_COLOR_MATERIAL );
	glEnable (GL_DEPTH_TEST);
	glDepthMask ( 1 );

	float points[] = {
 		 -10.0f,  10.0f, -10.0f,-10.0f, -10.0f, -10.0f,10.0f, -10.0f, -10.0f,10.0f, -10.0f, -10.0f,10.0f,  10.0f, -10.0f,-10.0f,  10.0f, -10.0f,
  -10.0f, -10.0f,  10.0f,
  -10.0f, -10.0f, -10.0f,
  -10.0f,  10.0f, -10.0f,
  -10.0f,  10.0f, -10.0f,
  -10.0f,  10.0f,  10.0f,
  -10.0f, -10.0f,  10.0f,
  
   10.0f, -10.0f, -10.0f,
   10.0f, -10.0f,  10.0f,
   10.0f,  10.0f,  10.0f,
   10.0f,  10.0f,  10.0f,
   10.0f,  10.0f, -10.0f,
   10.0f, -10.0f, -10.0f,
   
  -10.0f, -10.0f,  10.0f,
  -10.0f,  10.0f,  10.0f,
   10.0f,  10.0f,  10.0f,
   10.0f,  10.0f,  10.0f,
   10.0f, -10.0f,  10.0f,
  -10.0f, -10.0f,  10.0f,
  
  -10.0f,  10.0f, -10.0f,
   10.0f,  10.0f, -10.0f,
   10.0f,  10.0f,  10.0f,
   10.0f,  10.0f,  10.0f,
  -10.0f,  10.0f,  10.0f,
  -10.0f,  10.0f, -10.0f,
  
  -10.0f, -10.0f, -10.0f,
  -10.0f, -10.0f,  10.0f,
   10.0f, -10.0f, -10.0f,
   10.0f, -10.0f, -10.0f,
  -10.0f, -10.0f,  10.0f,
   10.0f, -10.0f,  10.0f
};
	GLuint vbo;
	glGenBuffers (1, &vbo);
	glBindBuffer (GL_ARRAY_BUFFER, vbo);
	glBufferData (GL_ARRAY_BUFFER, 3 * 36 * sizeof (float), &points, GL_STATIC_DRAW);

	GLuint vao;
	glGenVertexArrays (1, &vao);
	glBindVertexArray (vao);
	glEnableVertexAttribArray (0);
	glBindBuffer (GL_ARRAY_BUFFER, vbo);
	glVertexAttribPointer (0, 3, GL_FLOAT, GL_FALSE, 0, NULL);

}
//******************************************************************************
//******************************************************************************
void GLWidget::void create_cube_map (
  const char* front,
  const char* back,
  const char* top,
  const char* bottom,
  const char* left,
  const char* right,
  GLuint* tex_cube
) {
  // generate a cube-map texture to hold all the sides
  glActiveTexture (GL_TEXTURE0);
  glGenTextures (1, tex_cube);
  
  // load each image and copy into a side of the cube-map texture
  load_cube_map_side (*tex_cube, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, front);
  load_cube_map_side (*tex_cube, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, back);
  load_cube_map_side (*tex_cube, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, top);
  load_cube_map_side (*tex_cube, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, bottom);
  load_cube_map_side (*tex_cube, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, left);
  load_cube_map_side (*tex_cube, GL_TEXTURE_CUBE_MAP_POSITIVE_X, right);
  // format cube map texture
  glTexParameteri (GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
  glTexParameteri (GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
  glTexParameteri (GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_R, GL_CLAMP_TO_EDGE);
  glTexParameteri (GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
  glTexParameteri (GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
}

void GLWidget::bool load_cube_map_side (GLuint texture, GLenum side_target, const char* file_name) 
{
  glBindTexture (GL_TEXTURE_CUBE_MAP, texture);

  int x, y, n;
  int force_channels = 4;
  unsigned char*  image_data = stbi_load (
    file_name, &x, &y, &n, force_channels);
  if (!image_data) {
    fprintf (stderr, "ERROR: could not load %s\n", file_name);
    return false;
  }
  // non-power-of-2 dimensions check
  if ((x & (x - 1)) != 0 || (y & (y - 1)) != 0) {
    fprintf (
      stderr, "WARNING: image %s is not power-of-2 dimensions\n", file_name
    );
  }
  
  // copy image data into 'target' side of cube map
  glTexImage2D (
    side_target,
    0,
    GL_RGBA,
    x,
    y,
    0,
    GL_RGBA,
    GL_UNSIGNED_BYTE,
    image_data
  );
  free (image_data);
  return true;
}
//******************************************************************************
//******************************************************************************
void GLWidget::drawBackground()
{
  glDepthMask (GL_FALSE);
  glUseProgram (shader_programme);
  glActiveTexture (GL_TEXTURE0);
  glBindTexture (GL_TEXTURE_CUBE_MAP, tex_cube);
  glBindVertexArray (vao);
  glDrawArrays (GL_TRIANGLES, 0, 36);
  glDepthMask (GL_TRUE);
}

//******************************************************************************
//******************************************************************************
void GLWidget::keyPressEvent( QKeyEvent *e )
{ 
}
//******************************************************************************
//******************************************************************************
void GLWidget::clean()
{
  	init();
}

//******************************************************************************
//******************************************************************************
void GLWidget::draw() 
{
	drawBackground();
	//if(_hybridOcean) _hybridOcean->display();
	//printf("posCam:%f %f %f\n",this->camera()->position().x,this->camera()->position().y,this->camera()->position().z);
	//printf("viewDir:%f %f %f\n",this->camera()->viewDirection().x,this->camera()->viewDirection().y,this->camera()->viewDirection().z);
}
//******************************************************************************
//******************************************************************************

//******************************************************************************
//******************************************************************************
void GLWidget::animate()
{
	if(_hybridOcean) _hybridOcean->animate();
}
//******************************************************************************
//******************************************************************************
void GLWidget::test()
{	
	
	/*// Création d'un groupe de vague
	float k1 = 2*M_PI/13.0; // nombre d'onde : 2pi/lambda
  	float w1 = sqrt(9.81*k1); // pulsation (relation de dispersion par grande profondeur)
  	float theta1 = 0.0; // direction du vecteur d'onde kx=k.cos(theta), ky=k.sin(theta)
  	float r1 = 1.1/k1; // rayon des plus grosses vagues au centre du groupe (r.k==1 est la cambrure limite du déferlement)
  	float phi01 = 0; // phase initiale de l'onde
  	float zeta1 = M_PI/3.0; // phase instantannée maximale (-zeta<dphiw<zeta)
  	int n1 = 5; // nombre de vagues sous l'enveloppe

	// Création d'un groupe de vague
	float k2 = 2*M_PI/10.0; // nombre d'onde : 2pi/lambda
  	float w2 = sqrt(9.81*k2); // pulsation (relation de dispersion par grande profondeur)
  	float theta2 = 0.5; // direction du vecteur d'onde kx=k.cos(theta), ky=k.sin(theta)
  	float r2 = 1.1/k2; // rayon des plus grosses vagues au centre du groupe (r.k==1 est la cambrure limite du déferlement)
  	float phi02 = 0.1; // phase initiale de l'onde
  	float zeta2 = M_PI/3.0; // phase instantannée maximale (-zeta<dphiw<zeta)
  	int n2 = 5; // nombre de vagues sous l'enveloppe

	WaveGroupMP *waveGr1 = new WaveGroupMP(n1,k1,theta1,r1,phi01,zeta1);
	WaveGroupMP *waveGr2 = new WaveGroupMP(n2,k2,theta2,r2,phi02,zeta2);
	WaveGroupMP *waveGr3 = new WaveGroupMP(n2,k2,theta2,r2,phi02,zeta2);
*/
	_hybridOcean = new HybridOcean();
/*	_hybridOcean->addWaveGroup(waveGr1);
	_hybridOcean->addWaveGroup(waveGr2);
	_hybridOcean->addWaveGroup(waveGr3);*/
	_hybridOcean->loadSpectrum("spectrum.txt");

}
//******************************************************************************
//******************************************************************************
